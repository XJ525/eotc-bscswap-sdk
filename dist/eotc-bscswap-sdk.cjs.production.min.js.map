{"version":3,"file":"eotc-bscswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  BSC = 56,\n  MATIC = 137,\n  BSC_TSET = 97,\n  OKEXCHAIN = 66,\n  HUOBI = 128,\n  OPTIMISM = 10,\n  ARBITRUM = 42161,\n  GNOSIS = 100,\n  AVALANCHE = 43114,\n  FANTOM = 250,\n  KLAYTN = 8217,\n  AURORA = 1313161554\n\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n//swap的工厂合约地址\nexport const FACTORY_ADDRESS = '0x73857Fa9a849Cd6DC8387C37f54Ad0F56B575eA2'\n//初始化代码哈希\nexport const INIT_CODE_HASH = '0xa9fbfced95fed0f4cbe56a6f056f7f895c31bee594b6a273f043d2ae917102e3'\nexport const CONTRACT = {\n  PANCAKE: {\n    FACTORY: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    ROUTER: '0x10ED43C718714eb63d5aA57B78B54704E256024E',\n    INIT_CODE_HASH: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n  },\n  SUHSI: {\n    FACTORY: '0xc35dadb65012ec5796536bd9864ed8773abc74c4',\n    ROUTER: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n    INIT_CODE_HASH: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  }\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static ETHER: Currency = new Currency(18, 'BNB', 'Ether')\n  public static setETHER(decimals: number, symbol: string, name: string) {\n    Currency.ETHER = new Currency(decimals, symbol, name)\n  }\n  public static getETHER(): Currency {\n    return Currency.ETHER\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.BSC_TSET]: new Token(ChainId.BSC_TSET, '0x0f298F5dAF0fE2C4817C6F51CA7Cd56aaD308a05', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [ChainId.OKEXCHAIN]: new Token(ChainId.OKEXCHAIN, '0x8f8526dbfd6e38e3d8307702ca8469bae6c56c15', 18, 'WOKT', 'Wrapped OKT'),\n  [ChainId.HUOBI]: new Token(ChainId.HUOBI, '0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f', 18, 'WHT', 'Wrapped HT'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GNOSIS]: new Token(ChainId.GNOSIS, '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1', 18, 'WXDAI', 'Wrapped XDAI'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped Fantom'),\n  [ChainId.KLAYTN]: new Token(ChainId.KLAYTN, '0xe4f05a66ec68b54a58b17c22107b02e0232cc817', 18, 'WKLAY', 'Wrapped Klay'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped Ether')\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency /*ETHER*/ } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(Currency.ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    // 检查当前实例是否按地址排序在另一个之前。\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  //  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n  // //   const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n  // //     ? [tokenAmountA, tokenAmountB]\n  // //     : [tokenAmountB, tokenAmountA]\n  // //   this.liquidityToken = new Token(\n  // //     tokenAmounts[0].token.chainId,\n  // //     Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n  // //     18,\n  // //     'UNI-V2',\n  // //     'Uniswap V2'\n  // //   )\n  // //   this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  //  }\n  public constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    liquidityTokenAddress?: string,\n    liquidityToken?: Token\n  ) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    if (liquidityToken) {\n      this.liquidityToken = liquidityToken\n    } else {\n      this.liquidityToken = new Token(\n        tokenAmounts[0].token.chainId,\n        liquidityTokenAddress || Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n        18,\n        'UNI-V2',\n        'Uniswap V2'\n      )\n    }\n\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency /*, ETHER*/ } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === Currency.ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === Currency.ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === Currency.ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === Currency.ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === Currency.ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === Currency.ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, /*ETHER,*/ Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === Currency.ETHER\n    const etherOut = trade.outputAmount.currency === Currency.ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","name","constructor","setPrototypeOf","prototype","_inheritsLoose","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","setETHER","ETHER","getETHER","Token","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","BSC_TSET","BSC","MATIC","OKEXCHAIN","HUOBI","OPTIMISM","ARBITRUM","GNOSIS","AVALANCHE","FANTOM","KLAYTN","AURORA","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","liquidityTokenAddress","liquidityToken","tokenAmounts","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}